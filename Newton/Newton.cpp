//////////////
////牛顿迭代法，又称作切线法，其具体原理为
////求方程f(x)=0的近似根x_k,f(x)=f(x_k)+f'(x_k)(x-x_k)+o(x-x_k)
////从而转化为求f(x_k)+f'(x_k)(x-x_k)=0的根
////牛顿迭代公式为：x_(k+1)=x_k-f(x_k)/f'(x_k)
////相应的迭代函数为：g(x)=x-f(x)/f'(x),x=g(x)
////改进：输出每一次迭代的结果,将迭代模块做全面
//////////////
/*
 * 牛顿迭代法（Newton’s method）又称为牛顿-拉夫逊方法（Newton-Raphson method），它是牛顿在

17世纪提出的一种在实数域和复数域上近似求解方程的方法。多数方程不存在求根公式，因此求精确根非

常困难，甚至不可能，从而寻找方程的近似根就显得特别重要。

方法使用函数f(x)的泰勒级数的前面几项来寻找方程f(x) = 0的根。

牛顿迭代法是求方程根的重要方法之一，其最大优点是在方程f(x) = 0的单根

附近具有平方收敛，而且该法还可以用来求方程的重根、复根。另外该方法广泛用于计算机编程中。



设r是f(x) = 0的根，选取x0作为r初始近似值，

过点（x0,f(x0)）做曲线y = f(x)的切线L，L的方程为y = f(x0)+f'(x0)(x-x0)，

求出L与x轴交点的横坐标 x1 = x0-f(x0)/f'(x0)，

称x1为r的一次近似值。

过点（x1,f(x1)）做曲线y = f(x)的切线，并求该切线与x轴交点的横坐标 x2 = x1-f(x1)/f'(x1)，

称x2为r的二次近似值。

重复以上过程，得r的近似值序列，

其中x(n+1)=x(n)－f(x(n)) /f'(x(n))，

称为r的n+1次近似值，上式称为牛顿迭代公式。

　　解非线性方程f(x)=0的牛顿法是把非线性方程线性化的一种近似方法。

把f(x)在x0点附近展开成泰勒级数 f(x) = f(x0)+(x－x0)f'(x0)+(x－x0)^2*f”(x0)/2! +…

取其线性部分，作为非线性方程f(x)=0的近似方程，

即泰勒展开的前两项，则有f(x0)+f'(x0)(x－x0)=f(x)=0 设f'(x0)≠0

则其解为x1=x0－f(x0)/f'(x0)

这样，得到牛顿法的一个迭代序列：x(n+1)=x(n)－f(x(n))/f'(x(n))。
 *
 * */
#include "math.h"
#include <iostream>
using namespace std;

   double NewtonIterative(double a,double b,double c,double d,double x0)
  {
    double f0,f0d,x;
    x = x0;
    do
    {
        x0 = x;
        f0 = ((a * x + b) * x + c) * x + d;
        f0d = ( 3 * a * x + 2 * b ) * x + c;
        x = x0 - f0 / f0d;
    }
    while(fabs(f0) >= 1e-12);
    return x;
   }
int main(){

cout<<NewtonIterative(3.0,-3.0,5.0,1.0,5.0);
return 0;
}
